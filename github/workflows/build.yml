name: Build-Analyze-Deliver-Deploy
on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Dependencies Scan
        run: mvn clean verify -DskipTests -Pcve

      - name: Unit Testing
        run: mvn test -Put

      - name: Integration Testing
        run: mvn test -Pit

      - name: Quality Gate
        run: mvn clean verify sonar:sonar -Dsonar.organization=diangual -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.projectKey=Diangual_Projet-Agilite

      - name: Check Quality Gate
        run: |
          # Vérifier que la Quality Gate est ok
          if [ $(sonar-scanner -Dsonar.projectKey=Diangual_Projet-Agilite -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }} | grep -o "Quality Gate: Passed" | wc -l) -eq 0 ]; then
            echo "Quality Gate failed!"
            exit 1
          else
            echo "Quality Gate passed!"
          fi

      - name: Package
        run: mvn -B package -DskipTests=true

      - name: Login to Docker
        run: |
          docker login -u=${{secrets.DOCKER_USERNAME}} -p=${{ secrets.DOCKER_TOKEN}} docker.io

      - name: Build Docker image
        run: |
          docker build -t ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE}}:${{ github.sha }} -t ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE}}:latest .

      - name: Publish Docker image versions
        run: |
          docker push --all-tags ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE}}

      - name: Deploy to Dev
        run: |
          # Se connecter au serveur distant
          ssh user@host '
            # Arrêter le conteneur Docker existant
            docker stop my-container

            # Tirer la nouvelle image Docker
            docker pull ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE}}:latest

            # Démarrer le nouveau conteneur
            docker run -d -p 8080:8080 ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE}}:latest
          '

      - name: Wait for deploy to finish
        run: |
          echo "Wait 30s ..."
          sleep 30

      - name: Check deploy
        run: |
          # Vérifier que le déploiement s'est bien passé
          response=$(curl -s -o /dev/null -w "%{http_code}" http://my_server_ip:8080/cicd/_health)
          if [ $response -eq 200 ]; then
            echo "Deploy successful!"
          else
            echo "Deploy failed!"
            exit 1
          fi